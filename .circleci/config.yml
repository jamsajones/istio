version: 2
defaults: &defaults
  working_directory: /go/src/istio.io/istio
  docker:
    - image: istio/ci:go1.9-k8s1.7.4

# org context settings. If developing on a clone, please configure:

# DOCKER_USER
# DOCKER_PASS
# HUB: ex istio, costinm (it is not the hub, but the dockerhub org or user)

integrationDefaults: &integrationDefaults
  machine: true
  working_directory: /go/src/istio.io/istio #same as docker
  environment:
    CHANGE_MINIKUBE_NONE_USER: true
    HUB: docker.io/dnerepo
    TAG: dontpush
    GOPATH: /go

jobs:
  # WIP: run e2e tests (install full istio) in minikube.
  # Currently fails due to DNS problems, tests use "istio-pilot.istio-system", but dnsmasq
  # expects .cluster.local (with -none driver).
  e2e:
    <<: *integrationDefaults
    environment:
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - GOPATH: /go
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
      - checkout
      - attach_workspace:
          at:  /go
      - run:
          name: "Start minikube"
          command: |
            curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.22.3/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            mkdir -p /go/out
            mkdir /home/circleci/logs
            sudo -E minikube start \
              --extra-config=apiserver.Admission.PluginNames="Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,GenericAdmissionWebhook,ResourceQuota" \
              --kubernetes-version=v1.7.5 --vm-driver=none
            sudo chown -R $USER $KUBECONFIG
            sudo chown -R $USER $HOME/.minikube
            cat $KUBECONFIG

      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run: make docker
      - run:
          name: "Wait for minikube"
          command: |
            kubectl cluster-info
            set -ne
            for i in {1..150}; do # timeout for 5 minutes
               kubectl get po &> /dev/null
               if [ $? -ne 1 ]; then
                  break
              fi
              sleep 2
            done
            kubectl get svc --all-namespaces

      - run: docker images
      - run:
            timeout: 20m
            command: |
                  make e2e_simple E2E_ARGS="--skip_delete -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2 --istioctl ${GOPATH}/bin/istioctl"
      - run:
            timeout: 20m
            # Run the test even if previous failed
            when: always
            command: |
                  make e2e_mixer E2E_ARGS="--skip_delete -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2 --istioctl ${GOPATH}/bin/istioctl"
      - run:
            timeout: 20m
            when: always
            command: |
              make e2e_bookinfo E2E_ARGS="--skip_delete -use_local_cluster -cluster_wide -alsologtostderr -test.v -v 2 --istioctl ${GOPATH}/bin/istioctl"

      - store_artifacts:
          path: /home/circleci/logs
          path: /tmp

  pilot-integration-auth:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - HUB: docker.io/dnerepo
            - TAG: dontpush
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          sudo chown -R circleci /usr/local/go
      - checkout
      - run: curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run: curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.22.3/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          command: |
            mkdir -p /go/out
            mkdir /home/circleci/logs
            sudo -E minikube start \
              --extra-config=apiserver.Admission.PluginNames="Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,GenericAdmissionWebhook,ResourceQuota" \
              --kubernetes-version=v1.7.5 --vm-driver=none
            sudo chown -R $USER $KUBECONFIG
            sudo chown -R $USER $HOME/.minikube
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run: cd pilot; bin/gocompile-and-push-images.sh -hub $HUB -tag $TAG -build-only
      - run: go build -i ./pilot/test/integration
      - run:
          command: |
            set -ne
            kubectl cluster-info
            for i in {1..150}; do # timeout for 5 minutes
               kubectl get po &> /dev/null
               if [ $? -ne 1 ]; then
                  break
              fi
              sleep 2
            done
      - run: ./integration --logtostderr -hub $HUB -tag $TAG -mixer=false -auth=enable -errorlogsdir=/home/circleci/logs -use-initializer
      - store_artifacts:
          path: /home/circleci/logs

  pilot-integration-noauth:
    <<: *integrationDefaults
    environment:
            - GOPATH: /go
            - KUBECONFIG: /go/out/minikube.conf
            - TEST_ENV: minikube-none
            - HUB: docker.io/dnerepo
            - TAG: dontpush
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
          sudo chown -R circleci /usr/local/go
      - checkout
      - run: curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.4/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
      - run: curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.22.3/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
      - run:
          command: |
            mkdir -p /go/out
            mkdir /home/circleci/logs
            sudo -E minikube start \
              --extra-config=apiserver.Admission.PluginNames="Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,GenericAdmissionWebhook,ResourceQuota" \
              --kubernetes-version=v1.7.5 --vm-driver=none
            sudo chown -R $USER $KUBECONFIG
            sudo chown -R $USER $HOME/.minikube
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run: cd pilot; bin/gocompile-and-push-images.sh -hub $HUB -tag $TAG -build-only
      - run: go build -i ./pilot/test/integration
      - run:
          command: |
            set -ne
            kubectl cluster-info
            for i in {1..150}; do # timeout for 5 minutes
               kubectl get po &> /dev/null
               if [ $? -ne 1 ]; then
                  break
              fi
              sleep 2
            done
      - run: ./integration --logtostderr -hub $HUB -tag $TAG -mixer=false -auth=disable -errorlogsdir=/home/circleci/logs -use-initializer
      - store_artifacts:
          path: /home/circleci/logs

  dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            cd /go/src/istio.io/istio
            if [ ! -d vendor ]; then
               dep ensure
            fi
      - save_cache:
          key: dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
            - /go/src/istio.io/istio/vendor

  codecov:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - run: mkdir -p /tmp/coverage
      - run:
          name: Running Kubernetes API Server standalone
          command: /tmp/apiserver/start-test-server.sh
          background: true
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            bin/init.sh
      - run:
          command: |
            mkdir ~/.kube
            cp /go/src/istio.io/istio/.circleci/config ~/.kube/config
            ln -s ~/.kube/config /go/src/istio.io/istio/pilot/platform/kube/config
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh pilot
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F pilot
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh security
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F security
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh broker
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F broker
      - run: cd /go/src/istio.io/istio; maxprocs=6 bin/parallel-codecov.sh mixer
      - run:
          command: |
            bash <(curl -s https://codecov.io/bash) -F mixer

  docker:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            make docker push
      - store_artifacts:
          path: /go/bin

  test:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            mkdir -p /go/out/tests
            go get github.com/jstemmer/go-junit-report
            trap "go-junit-report </go/out/tests/go-test-report.out > /go/out/tests/go-test-report.xml" EXIT
            make localTestEnv go-test KUBECONFIG=/go/src/istio.io/istio/.circleci/config T=-v | tee /go/out/tests/go-test-report.out
      - store_artifacts:
          path: /go/bin
          path: /go/out
      - store_test_results:
          path: /go/out/tests

  build:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            cd /go/src/istio.io/istio
            make go-build
      - store_artifacts:
          path: /go/bin
      - persist_to_workspace:
          root: /go
          paths:
            - pkg
            - bin

  lint:
    <<: *integrationDefaults
    resource_class: xlarge
    steps:
      - type: shell
        name: Initialize Working Directory
        pwd: /
        command: |
          sudo mkdir -p /go/src/istio.io/istio
          sudo chown -R circleci /go
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          no_output_timeout: 900
          command: |
            make lint

  docker-push:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          command: |
            if [ ! -z "${DOCKER_USER}" ] ; then
              echo "Pushing docker images"
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              make docker push
            fi
      - store_artifacts:
          path: /go/bin

  goxbuild:
    <<: *defaults
    resource_class: xlarge
    steps:
      - checkout
      - restore_cache:
          keys:
            - dep-cache-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
      - run:
          command: |
            cp -a /usr/local/go /go
            export PATH=/go/go/bin:$PATH
            export GOROOT=/go/go
            cd /go/src/istio.io/istio
            make go-build GOOS=darwin KUBECONFIG=/go/src/istio.io/istio/.circleci/config
            make go-build GOOS=linux GOARCH=arm KUBECONFIG=/go/src/istio.io/istio/.circleci/config
      - store_artifacts:
          path: /go/bin

workflows:
  version: 2
  nightly:
    triggers:
       - schedule:
           cron: "0 0 * * *"
           filters:
             branches:
               only:
                 - master
    jobs:
      - dependencies
      # Build
      - gobuild:
          requires:
            - dependencies
      # Unit tests
      - gotest:
          requires:
            - gobuild
      # Compile for mac and arm
      - goxbuild:
          requires:
            - gotest
      # Integration tests
      - pilot-integration-auth:
          requires:
            - gotest
      # Push to dockerhub
      - docker-push:
          context: org-global
          requires:
            - pilot-integration-auth

  all:
    jobs:
      - dependencies
      - build:
          requires:
            - dependencies
      - e2e:
          requires:
            - build
      - test:
          requires:
            - dependencies
      - codecov:
          requires:
            - build
      - lint:
          requires:
            - dependencies
      - pilot-integration-noauth:
          requires:
            - test
      - pilot-integration-auth:
          requires:
            - test
