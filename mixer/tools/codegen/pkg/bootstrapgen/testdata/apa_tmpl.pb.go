// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bazel-out/local-fastbuild/genfiles/mixer/tools/codegen/pkg/bootstrapgen/testdata/apa_tmpl.proto

/*
	Package istio_mixer_adapter_sample_myapa is a generated protocol buffer package.

	It is generated from these files:
		bazel-out/local-fastbuild/genfiles/mixer/tools/codegen/pkg/bootstrapgen/testdata/apa_tmpl.proto

	It has these top-level messages:
		InstanceParam
		Resource1InstanceParam
		Resource2InstanceParam
		Resource3InstanceParam
*/
package istio_mixer_adapter_sample_myapa

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "istio.io/api/mixer/v1/template"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InstanceParam struct {
	Int64Primitive                 string                             `protobuf:"bytes,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive                  string                             `protobuf:"bytes,2,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive                string                             `protobuf:"bytes,3,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive                string                             `protobuf:"bytes,4,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	DimensionsFixedInt64ValueDType map[string]string                  `protobuf:"bytes,5,rep,name=dimensionsFixedInt64ValueDType" json:"dimensionsFixedInt64ValueDType,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeStamp                      string                             `protobuf:"bytes,6,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Duration                       string                             `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	Res3Map                        map[string]*Resource3InstanceParam `protobuf:"bytes,8,rep,name=res3_map,json=res3Map" json:"res3_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	IpAddr                         string                             `protobuf:"bytes,11,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	DnsName                        string                             `protobuf:"bytes,12,opt,name=dns_name,json=dnsName,proto3" json:"dns_name,omitempty"`
	EmailAddr                      string                             `protobuf:"bytes,13,opt,name=email_addr,json=emailAddr,proto3" json:"email_addr,omitempty"`
	Uri                            string                             `protobuf:"bytes,14,opt,name=uri,proto3" json:"uri,omitempty"`
	// Attribute names to expression mapping. These expressions can use the fields from the output object
	// returned by the attribute producing adapters using $out.<fieldName> notation. For example:
	// source.ip : $out.source_pod_ip
	// In the above example, source.ip attribute will be added to the existing attribute list and its value will be set to
	// the value of source_pod_ip field of the output returned by the adapter.
	AttributeBindings map[string]string `protobuf:"bytes,72295728,rep,name=attribute_bindings,json=attributeBindings" json:"attribute_bindings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InstanceParam) Reset()                    { *m = InstanceParam{} }
func (*InstanceParam) ProtoMessage()               {}
func (*InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorApaTmpl, []int{0} }

func (m *InstanceParam) GetInt64Primitive() string {
	if m != nil {
		return m.Int64Primitive
	}
	return ""
}

func (m *InstanceParam) GetBoolPrimitive() string {
	if m != nil {
		return m.BoolPrimitive
	}
	return ""
}

func (m *InstanceParam) GetDoublePrimitive() string {
	if m != nil {
		return m.DoublePrimitive
	}
	return ""
}

func (m *InstanceParam) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *InstanceParam) GetDimensionsFixedInt64ValueDType() map[string]string {
	if m != nil {
		return m.DimensionsFixedInt64ValueDType
	}
	return nil
}

func (m *InstanceParam) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *InstanceParam) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *InstanceParam) GetRes3Map() map[string]*Resource3InstanceParam {
	if m != nil {
		return m.Res3Map
	}
	return nil
}

func (m *InstanceParam) GetIpAddr() string {
	if m != nil {
		return m.IpAddr
	}
	return ""
}

func (m *InstanceParam) GetDnsName() string {
	if m != nil {
		return m.DnsName
	}
	return ""
}

func (m *InstanceParam) GetEmailAddr() string {
	if m != nil {
		return m.EmailAddr
	}
	return ""
}

func (m *InstanceParam) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *InstanceParam) GetAttributeBindings() map[string]string {
	if m != nil {
		return m.AttributeBindings
	}
	return nil
}

type Resource1InstanceParam struct {
	Str         string                  `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	SelfRefRes1 *Resource1InstanceParam `protobuf:"bytes,3,opt,name=self_ref_res1,json=selfRefRes1" json:"self_ref_res1,omitempty"`
	ResRef2     *Resource2InstanceParam `protobuf:"bytes,2,opt,name=resRef2" json:"resRef2,omitempty"`
}

func (m *Resource1InstanceParam) Reset()                    { *m = Resource1InstanceParam{} }
func (*Resource1InstanceParam) ProtoMessage()               {}
func (*Resource1InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorApaTmpl, []int{1} }

func (m *Resource1InstanceParam) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Resource1InstanceParam) GetSelfRefRes1() *Resource1InstanceParam {
	if m != nil {
		return m.SelfRefRes1
	}
	return nil
}

func (m *Resource1InstanceParam) GetResRef2() *Resource2InstanceParam {
	if m != nil {
		return m.ResRef2
	}
	return nil
}

type Resource2InstanceParam struct {
	Str     string                             `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Res3    *Resource3InstanceParam            `protobuf:"bytes,2,opt,name=res3" json:"res3,omitempty"`
	Res3Map map[string]*Resource3InstanceParam `protobuf:"bytes,3,rep,name=res3_map,json=res3Map" json:"res3_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Resource2InstanceParam) Reset()                    { *m = Resource2InstanceParam{} }
func (*Resource2InstanceParam) ProtoMessage()               {}
func (*Resource2InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorApaTmpl, []int{2} }

func (m *Resource2InstanceParam) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *Resource2InstanceParam) GetRes3() *Resource3InstanceParam {
	if m != nil {
		return m.Res3
	}
	return nil
}

func (m *Resource2InstanceParam) GetRes3Map() map[string]*Resource3InstanceParam {
	if m != nil {
		return m.Res3Map
	}
	return nil
}

type Resource3InstanceParam struct {
	Int64Primitive                 string            `protobuf:"bytes,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive                  string            `protobuf:"bytes,2,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive                string            `protobuf:"bytes,3,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive                string            `protobuf:"bytes,4,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	DimensionsFixedInt64ValueDType map[string]string `protobuf:"bytes,5,rep,name=dimensionsFixedInt64ValueDType" json:"dimensionsFixedInt64ValueDType,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TimeStamp                      string            `protobuf:"bytes,6,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	Duration                       string            `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Resource3InstanceParam) Reset()                    { *m = Resource3InstanceParam{} }
func (*Resource3InstanceParam) ProtoMessage()               {}
func (*Resource3InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorApaTmpl, []int{3} }

func (m *Resource3InstanceParam) GetInt64Primitive() string {
	if m != nil {
		return m.Int64Primitive
	}
	return ""
}

func (m *Resource3InstanceParam) GetBoolPrimitive() string {
	if m != nil {
		return m.BoolPrimitive
	}
	return ""
}

func (m *Resource3InstanceParam) GetDoublePrimitive() string {
	if m != nil {
		return m.DoublePrimitive
	}
	return ""
}

func (m *Resource3InstanceParam) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *Resource3InstanceParam) GetDimensionsFixedInt64ValueDType() map[string]string {
	if m != nil {
		return m.DimensionsFixedInt64ValueDType
	}
	return nil
}

func (m *Resource3InstanceParam) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *Resource3InstanceParam) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func init() {
	proto.RegisterType((*InstanceParam)(nil), "istio.mixer.adapter.sample.myapa.InstanceParam")
	proto.RegisterType((*Resource1InstanceParam)(nil), "istio.mixer.adapter.sample.myapa.Resource1InstanceParam")
	proto.RegisterType((*Resource2InstanceParam)(nil), "istio.mixer.adapter.sample.myapa.Resource2InstanceParam")
	proto.RegisterType((*Resource3InstanceParam)(nil), "istio.mixer.adapter.sample.myapa.Resource3InstanceParam")
}
func (this *InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceParam)
	if !ok {
		that2, ok := that.(InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64Primitive != that1.Int64Primitive {
		return false
	}
	if this.BoolPrimitive != that1.BoolPrimitive {
		return false
	}
	if this.DoublePrimitive != that1.DoublePrimitive {
		return false
	}
	if this.StringPrimitive != that1.StringPrimitive {
		return false
	}
	if len(this.DimensionsFixedInt64ValueDType) != len(that1.DimensionsFixedInt64ValueDType) {
		return false
	}
	for i := range this.DimensionsFixedInt64ValueDType {
		if this.DimensionsFixedInt64ValueDType[i] != that1.DimensionsFixedInt64ValueDType[i] {
			return false
		}
	}
	if this.TimeStamp != that1.TimeStamp {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if len(this.Res3Map) != len(that1.Res3Map) {
		return false
	}
	for i := range this.Res3Map {
		if !this.Res3Map[i].Equal(that1.Res3Map[i]) {
			return false
		}
	}
	if this.IpAddr != that1.IpAddr {
		return false
	}
	if this.DnsName != that1.DnsName {
		return false
	}
	if this.EmailAddr != that1.EmailAddr {
		return false
	}
	if this.Uri != that1.Uri {
		return false
	}
	if len(this.AttributeBindings) != len(that1.AttributeBindings) {
		return false
	}
	for i := range this.AttributeBindings {
		if this.AttributeBindings[i] != that1.AttributeBindings[i] {
			return false
		}
	}
	return true
}
func (this *Resource1InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource1InstanceParam)
	if !ok {
		that2, ok := that.(Resource1InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if !this.SelfRefRes1.Equal(that1.SelfRefRes1) {
		return false
	}
	if !this.ResRef2.Equal(that1.ResRef2) {
		return false
	}
	return true
}
func (this *Resource2InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource2InstanceParam)
	if !ok {
		that2, ok := that.(Resource2InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Str != that1.Str {
		return false
	}
	if !this.Res3.Equal(that1.Res3) {
		return false
	}
	if len(this.Res3Map) != len(that1.Res3Map) {
		return false
	}
	for i := range this.Res3Map {
		if !this.Res3Map[i].Equal(that1.Res3Map[i]) {
			return false
		}
	}
	return true
}
func (this *Resource3InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Resource3InstanceParam)
	if !ok {
		that2, ok := that.(Resource3InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64Primitive != that1.Int64Primitive {
		return false
	}
	if this.BoolPrimitive != that1.BoolPrimitive {
		return false
	}
	if this.DoublePrimitive != that1.DoublePrimitive {
		return false
	}
	if this.StringPrimitive != that1.StringPrimitive {
		return false
	}
	if len(this.DimensionsFixedInt64ValueDType) != len(that1.DimensionsFixedInt64ValueDType) {
		return false
	}
	for i := range this.DimensionsFixedInt64ValueDType {
		if this.DimensionsFixedInt64ValueDType[i] != that1.DimensionsFixedInt64ValueDType[i] {
			return false
		}
	}
	if this.TimeStamp != that1.TimeStamp {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&istio_mixer_adapter_sample_myapa.InstanceParam{")
	s = append(s, "Int64Primitive: "+fmt.Sprintf("%#v", this.Int64Primitive)+",\n")
	s = append(s, "BoolPrimitive: "+fmt.Sprintf("%#v", this.BoolPrimitive)+",\n")
	s = append(s, "DoublePrimitive: "+fmt.Sprintf("%#v", this.DoublePrimitive)+",\n")
	s = append(s, "StringPrimitive: "+fmt.Sprintf("%#v", this.StringPrimitive)+",\n")
	keysForDimensionsFixedInt64ValueDType := make([]string, 0, len(this.DimensionsFixedInt64ValueDType))
	for k, _ := range this.DimensionsFixedInt64ValueDType {
		keysForDimensionsFixedInt64ValueDType = append(keysForDimensionsFixedInt64ValueDType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDimensionsFixedInt64ValueDType)
	mapStringForDimensionsFixedInt64ValueDType := "map[string]string{"
	for _, k := range keysForDimensionsFixedInt64ValueDType {
		mapStringForDimensionsFixedInt64ValueDType += fmt.Sprintf("%#v: %#v,", k, this.DimensionsFixedInt64ValueDType[k])
	}
	mapStringForDimensionsFixedInt64ValueDType += "}"
	if this.DimensionsFixedInt64ValueDType != nil {
		s = append(s, "DimensionsFixedInt64ValueDType: "+mapStringForDimensionsFixedInt64ValueDType+",\n")
	}
	s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	keysForRes3Map := make([]string, 0, len(this.Res3Map))
	for k, _ := range this.Res3Map {
		keysForRes3Map = append(keysForRes3Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRes3Map)
	mapStringForRes3Map := "map[string]*Resource3InstanceParam{"
	for _, k := range keysForRes3Map {
		mapStringForRes3Map += fmt.Sprintf("%#v: %#v,", k, this.Res3Map[k])
	}
	mapStringForRes3Map += "}"
	if this.Res3Map != nil {
		s = append(s, "Res3Map: "+mapStringForRes3Map+",\n")
	}
	s = append(s, "IpAddr: "+fmt.Sprintf("%#v", this.IpAddr)+",\n")
	s = append(s, "DnsName: "+fmt.Sprintf("%#v", this.DnsName)+",\n")
	s = append(s, "EmailAddr: "+fmt.Sprintf("%#v", this.EmailAddr)+",\n")
	s = append(s, "Uri: "+fmt.Sprintf("%#v", this.Uri)+",\n")
	keysForAttributeBindings := make([]string, 0, len(this.AttributeBindings))
	for k, _ := range this.AttributeBindings {
		keysForAttributeBindings = append(keysForAttributeBindings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributeBindings)
	mapStringForAttributeBindings := "map[string]string{"
	for _, k := range keysForAttributeBindings {
		mapStringForAttributeBindings += fmt.Sprintf("%#v: %#v,", k, this.AttributeBindings[k])
	}
	mapStringForAttributeBindings += "}"
	if this.AttributeBindings != nil {
		s = append(s, "AttributeBindings: "+mapStringForAttributeBindings+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource1InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&istio_mixer_adapter_sample_myapa.Resource1InstanceParam{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	if this.SelfRefRes1 != nil {
		s = append(s, "SelfRefRes1: "+fmt.Sprintf("%#v", this.SelfRefRes1)+",\n")
	}
	if this.ResRef2 != nil {
		s = append(s, "ResRef2: "+fmt.Sprintf("%#v", this.ResRef2)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource2InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&istio_mixer_adapter_sample_myapa.Resource2InstanceParam{")
	s = append(s, "Str: "+fmt.Sprintf("%#v", this.Str)+",\n")
	if this.Res3 != nil {
		s = append(s, "Res3: "+fmt.Sprintf("%#v", this.Res3)+",\n")
	}
	keysForRes3Map := make([]string, 0, len(this.Res3Map))
	for k, _ := range this.Res3Map {
		keysForRes3Map = append(keysForRes3Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRes3Map)
	mapStringForRes3Map := "map[string]*Resource3InstanceParam{"
	for _, k := range keysForRes3Map {
		mapStringForRes3Map += fmt.Sprintf("%#v: %#v,", k, this.Res3Map[k])
	}
	mapStringForRes3Map += "}"
	if this.Res3Map != nil {
		s = append(s, "Res3Map: "+mapStringForRes3Map+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Resource3InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&istio_mixer_adapter_sample_myapa.Resource3InstanceParam{")
	s = append(s, "Int64Primitive: "+fmt.Sprintf("%#v", this.Int64Primitive)+",\n")
	s = append(s, "BoolPrimitive: "+fmt.Sprintf("%#v", this.BoolPrimitive)+",\n")
	s = append(s, "DoublePrimitive: "+fmt.Sprintf("%#v", this.DoublePrimitive)+",\n")
	s = append(s, "StringPrimitive: "+fmt.Sprintf("%#v", this.StringPrimitive)+",\n")
	keysForDimensionsFixedInt64ValueDType := make([]string, 0, len(this.DimensionsFixedInt64ValueDType))
	for k, _ := range this.DimensionsFixedInt64ValueDType {
		keysForDimensionsFixedInt64ValueDType = append(keysForDimensionsFixedInt64ValueDType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDimensionsFixedInt64ValueDType)
	mapStringForDimensionsFixedInt64ValueDType := "map[string]string{"
	for _, k := range keysForDimensionsFixedInt64ValueDType {
		mapStringForDimensionsFixedInt64ValueDType += fmt.Sprintf("%#v: %#v,", k, this.DimensionsFixedInt64ValueDType[k])
	}
	mapStringForDimensionsFixedInt64ValueDType += "}"
	if this.DimensionsFixedInt64ValueDType != nil {
		s = append(s, "DimensionsFixedInt64ValueDType: "+mapStringForDimensionsFixedInt64ValueDType+",\n")
	}
	s = append(s, "TimeStamp: "+fmt.Sprintf("%#v", this.TimeStamp)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringApaTmpl(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Int64Primitive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Int64Primitive)))
		i += copy(dAtA[i:], m.Int64Primitive)
	}
	if len(m.BoolPrimitive) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.BoolPrimitive)))
		i += copy(dAtA[i:], m.BoolPrimitive)
	}
	if len(m.DoublePrimitive) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.DoublePrimitive)))
		i += copy(dAtA[i:], m.DoublePrimitive)
	}
	if len(m.StringPrimitive) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.StringPrimitive)))
		i += copy(dAtA[i:], m.StringPrimitive)
	}
	if len(m.DimensionsFixedInt64ValueDType) > 0 {
		for k, _ := range m.DimensionsFixedInt64ValueDType {
			dAtA[i] = 0x2a
			i++
			v := m.DimensionsFixedInt64ValueDType[k]
			mapSize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			i = encodeVarintApaTmpl(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TimeStamp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.TimeStamp)))
		i += copy(dAtA[i:], m.TimeStamp)
	}
	if len(m.Duration) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Duration)))
		i += copy(dAtA[i:], m.Duration)
	}
	if len(m.Res3Map) > 0 {
		for k, _ := range m.Res3Map {
			dAtA[i] = 0x42
			i++
			v := m.Res3Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApaTmpl(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + msgSize
			i = encodeVarintApaTmpl(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApaTmpl(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.IpAddr) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.IpAddr)))
		i += copy(dAtA[i:], m.IpAddr)
	}
	if len(m.DnsName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.DnsName)))
		i += copy(dAtA[i:], m.DnsName)
	}
	if len(m.EmailAddr) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.EmailAddr)))
		i += copy(dAtA[i:], m.EmailAddr)
	}
	if len(m.Uri) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Uri)))
		i += copy(dAtA[i:], m.Uri)
	}
	if len(m.AttributeBindings) > 0 {
		for k, _ := range m.AttributeBindings {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0xd3
			i++
			dAtA[i] = 0xe4
			i++
			dAtA[i] = 0x93
			i++
			dAtA[i] = 0x2
			i++
			v := m.AttributeBindings[k]
			mapSize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			i = encodeVarintApaTmpl(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Resource1InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource1InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.ResRef2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(m.ResRef2.Size()))
		n2, err := m.ResRef2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.SelfRefRes1 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(m.SelfRefRes1.Size()))
		n3, err := m.SelfRefRes1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Resource2InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource2InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Str)))
		i += copy(dAtA[i:], m.Str)
	}
	if m.Res3 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(m.Res3.Size()))
		n4, err := m.Res3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Res3Map) > 0 {
		for k, _ := range m.Res3Map {
			dAtA[i] = 0x1a
			i++
			v := m.Res3Map[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApaTmpl(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + msgSize
			i = encodeVarintApaTmpl(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApaTmpl(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *Resource3InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource3InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Int64Primitive) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Int64Primitive)))
		i += copy(dAtA[i:], m.Int64Primitive)
	}
	if len(m.BoolPrimitive) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.BoolPrimitive)))
		i += copy(dAtA[i:], m.BoolPrimitive)
	}
	if len(m.DoublePrimitive) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.DoublePrimitive)))
		i += copy(dAtA[i:], m.DoublePrimitive)
	}
	if len(m.StringPrimitive) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.StringPrimitive)))
		i += copy(dAtA[i:], m.StringPrimitive)
	}
	if len(m.DimensionsFixedInt64ValueDType) > 0 {
		for k, _ := range m.DimensionsFixedInt64ValueDType {
			dAtA[i] = 0x2a
			i++
			v := m.DimensionsFixedInt64ValueDType[k]
			mapSize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			i = encodeVarintApaTmpl(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApaTmpl(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.TimeStamp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.TimeStamp)))
		i += copy(dAtA[i:], m.TimeStamp)
	}
	if len(m.Duration) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApaTmpl(dAtA, i, uint64(len(m.Duration)))
		i += copy(dAtA[i:], m.Duration)
	}
	return i, nil
}

func encodeVarintApaTmpl(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Int64Primitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.BoolPrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.DoublePrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.StringPrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if len(m.DimensionsFixedInt64ValueDType) > 0 {
		for k, v := range m.DimensionsFixedInt64ValueDType {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			n += mapEntrySize + 1 + sovApaTmpl(uint64(mapEntrySize))
		}
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if len(m.Res3Map) > 0 {
		for k, v := range m.Res3Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApaTmpl(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApaTmpl(uint64(mapEntrySize))
		}
	}
	l = len(m.IpAddr)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.DnsName)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.EmailAddr)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if len(m.AttributeBindings) > 0 {
		for k, v := range m.AttributeBindings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			n += mapEntrySize + 5 + sovApaTmpl(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Resource1InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if m.ResRef2 != nil {
		l = m.ResRef2.Size()
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if m.SelfRefRes1 != nil {
		l = m.SelfRefRes1.Size()
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	return n
}

func (m *Resource2InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if m.Res3 != nil {
		l = m.Res3.Size()
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if len(m.Res3Map) > 0 {
		for k, v := range m.Res3Map {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApaTmpl(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApaTmpl(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Resource3InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.Int64Primitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.BoolPrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.DoublePrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.StringPrimitive)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	if len(m.DimensionsFixedInt64ValueDType) > 0 {
		for k, v := range m.DimensionsFixedInt64ValueDType {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApaTmpl(uint64(len(k))) + 1 + len(v) + sovApaTmpl(uint64(len(v)))
			n += mapEntrySize + 1 + sovApaTmpl(uint64(mapEntrySize))
		}
	}
	l = len(m.TimeStamp)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovApaTmpl(uint64(l))
	}
	return n
}

func sovApaTmpl(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApaTmpl(x uint64) (n int) {
	return sovApaTmpl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForDimensionsFixedInt64ValueDType := make([]string, 0, len(this.DimensionsFixedInt64ValueDType))
	for k, _ := range this.DimensionsFixedInt64ValueDType {
		keysForDimensionsFixedInt64ValueDType = append(keysForDimensionsFixedInt64ValueDType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDimensionsFixedInt64ValueDType)
	mapStringForDimensionsFixedInt64ValueDType := "map[string]string{"
	for _, k := range keysForDimensionsFixedInt64ValueDType {
		mapStringForDimensionsFixedInt64ValueDType += fmt.Sprintf("%v: %v,", k, this.DimensionsFixedInt64ValueDType[k])
	}
	mapStringForDimensionsFixedInt64ValueDType += "}"
	keysForRes3Map := make([]string, 0, len(this.Res3Map))
	for k, _ := range this.Res3Map {
		keysForRes3Map = append(keysForRes3Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRes3Map)
	mapStringForRes3Map := "map[string]*Resource3InstanceParam{"
	for _, k := range keysForRes3Map {
		mapStringForRes3Map += fmt.Sprintf("%v: %v,", k, this.Res3Map[k])
	}
	mapStringForRes3Map += "}"
	keysForAttributeBindings := make([]string, 0, len(this.AttributeBindings))
	for k, _ := range this.AttributeBindings {
		keysForAttributeBindings = append(keysForAttributeBindings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributeBindings)
	mapStringForAttributeBindings := "map[string]string{"
	for _, k := range keysForAttributeBindings {
		mapStringForAttributeBindings += fmt.Sprintf("%v: %v,", k, this.AttributeBindings[k])
	}
	mapStringForAttributeBindings += "}"
	s := strings.Join([]string{`&InstanceParam{`,
		`Int64Primitive:` + fmt.Sprintf("%v", this.Int64Primitive) + `,`,
		`BoolPrimitive:` + fmt.Sprintf("%v", this.BoolPrimitive) + `,`,
		`DoublePrimitive:` + fmt.Sprintf("%v", this.DoublePrimitive) + `,`,
		`StringPrimitive:` + fmt.Sprintf("%v", this.StringPrimitive) + `,`,
		`DimensionsFixedInt64ValueDType:` + mapStringForDimensionsFixedInt64ValueDType + `,`,
		`TimeStamp:` + fmt.Sprintf("%v", this.TimeStamp) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Res3Map:` + mapStringForRes3Map + `,`,
		`IpAddr:` + fmt.Sprintf("%v", this.IpAddr) + `,`,
		`DnsName:` + fmt.Sprintf("%v", this.DnsName) + `,`,
		`EmailAddr:` + fmt.Sprintf("%v", this.EmailAddr) + `,`,
		`Uri:` + fmt.Sprintf("%v", this.Uri) + `,`,
		`AttributeBindings:` + mapStringForAttributeBindings + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource1InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Resource1InstanceParam{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`ResRef2:` + strings.Replace(fmt.Sprintf("%v", this.ResRef2), "Resource2InstanceParam", "Resource2InstanceParam", 1) + `,`,
		`SelfRefRes1:` + strings.Replace(fmt.Sprintf("%v", this.SelfRefRes1), "Resource1InstanceParam", "Resource1InstanceParam", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource2InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForRes3Map := make([]string, 0, len(this.Res3Map))
	for k, _ := range this.Res3Map {
		keysForRes3Map = append(keysForRes3Map, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRes3Map)
	mapStringForRes3Map := "map[string]*Resource3InstanceParam{"
	for _, k := range keysForRes3Map {
		mapStringForRes3Map += fmt.Sprintf("%v: %v,", k, this.Res3Map[k])
	}
	mapStringForRes3Map += "}"
	s := strings.Join([]string{`&Resource2InstanceParam{`,
		`Str:` + fmt.Sprintf("%v", this.Str) + `,`,
		`Res3:` + strings.Replace(fmt.Sprintf("%v", this.Res3), "Resource3InstanceParam", "Resource3InstanceParam", 1) + `,`,
		`Res3Map:` + mapStringForRes3Map + `,`,
		`}`,
	}, "")
	return s
}
func (this *Resource3InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForDimensionsFixedInt64ValueDType := make([]string, 0, len(this.DimensionsFixedInt64ValueDType))
	for k, _ := range this.DimensionsFixedInt64ValueDType {
		keysForDimensionsFixedInt64ValueDType = append(keysForDimensionsFixedInt64ValueDType, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForDimensionsFixedInt64ValueDType)
	mapStringForDimensionsFixedInt64ValueDType := "map[string]string{"
	for _, k := range keysForDimensionsFixedInt64ValueDType {
		mapStringForDimensionsFixedInt64ValueDType += fmt.Sprintf("%v: %v,", k, this.DimensionsFixedInt64ValueDType[k])
	}
	mapStringForDimensionsFixedInt64ValueDType += "}"
	s := strings.Join([]string{`&Resource3InstanceParam{`,
		`Int64Primitive:` + fmt.Sprintf("%v", this.Int64Primitive) + `,`,
		`BoolPrimitive:` + fmt.Sprintf("%v", this.BoolPrimitive) + `,`,
		`DoublePrimitive:` + fmt.Sprintf("%v", this.DoublePrimitive) + `,`,
		`StringPrimitive:` + fmt.Sprintf("%v", this.StringPrimitive) + `,`,
		`DimensionsFixedInt64ValueDType:` + mapStringForDimensionsFixedInt64ValueDType + `,`,
		`TimeStamp:` + fmt.Sprintf("%v", this.TimeStamp) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApaTmpl(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApaTmpl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Primitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Int64Primitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoolPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoublePrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoublePrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DimensionsFixedInt64ValueDType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DimensionsFixedInt64ValueDType == nil {
				m.DimensionsFixedInt64ValueDType = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApaTmpl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DimensionsFixedInt64ValueDType[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res3Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res3Map == nil {
				m.Res3Map = make(map[string]*Resource3InstanceParam)
			}
			var mapkey string
			var mapvalue *Resource3InstanceParam
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Resource3InstanceParam{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApaTmpl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res3Map[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IpAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DnsName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DnsName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 72295728:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttributeBindings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttributeBindings == nil {
				m.AttributeBindings = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApaTmpl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttributeBindings[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApaTmpl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApaTmpl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource1InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApaTmpl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource1InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource1InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResRef2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResRef2 == nil {
				m.ResRef2 = &Resource2InstanceParam{}
			}
			if err := m.ResRef2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfRefRes1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfRefRes1 == nil {
				m.SelfRefRes1 = &Resource1InstanceParam{}
			}
			if err := m.SelfRefRes1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApaTmpl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApaTmpl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource2InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApaTmpl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource2InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource2InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res3 == nil {
				m.Res3 = &Resource3InstanceParam{}
			}
			if err := m.Res3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res3Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res3Map == nil {
				m.Res3Map = make(map[string]*Resource3InstanceParam)
			}
			var mapkey string
			var mapvalue *Resource3InstanceParam
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Resource3InstanceParam{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApaTmpl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res3Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApaTmpl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApaTmpl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource3InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApaTmpl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource3InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource3InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Primitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Int64Primitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoolPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoublePrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoublePrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringPrimitive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringPrimitive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DimensionsFixedInt64ValueDType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DimensionsFixedInt64ValueDType == nil {
				m.DimensionsFixedInt64ValueDType = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApaTmpl
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApaTmpl
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApaTmpl(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApaTmpl
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DimensionsFixedInt64ValueDType[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApaTmpl
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApaTmpl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApaTmpl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApaTmpl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApaTmpl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApaTmpl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApaTmpl
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApaTmpl
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApaTmpl(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApaTmpl = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApaTmpl   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("bazel-out/local-fastbuild/genfiles/mixer/tools/codegen/pkg/bootstrapgen/testdata/apa_tmpl.proto", fileDescriptorApaTmpl)
}

var fileDescriptorApaTmpl = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcf, 0x6b, 0x13, 0x4d,
	0x18, 0xce, 0x26, 0x6d, 0x93, 0x4e, 0x9a, 0x7e, 0xfd, 0x86, 0x8f, 0x7e, 0xfb, 0x85, 0xcf, 0xa5,
	0x44, 0x91, 0x5e, 0xba, 0x4b, 0x12, 0x91, 0x22, 0x5e, 0x5a, 0xda, 0x42, 0x41, 0x4b, 0xdd, 0x8a,
	0x5e, 0x0a, 0x71, 0x36, 0xfb, 0x26, 0x0c, 0xdd, 0xdd, 0x59, 0x66, 0x66, 0x4b, 0xe2, 0xc9, 0x3f,
	0x41, 0xf0, 0xe8, 0xd5, 0x83, 0x47, 0xff, 0x00, 0xff, 0x00, 0xf1, 0x14, 0x3c, 0x79, 0xf0, 0x60,
	0xa3, 0x07, 0x4f, 0xd2, 0xa3, 0x47, 0xd9, 0xd9, 0xc4, 0xfc, 0xa0, 0x98, 0xa6, 0x22, 0xc5, 0x43,
	0x60, 0xe7, 0xd9, 0x67, 0x9e, 0xf7, 0x7d, 0xde, 0x79, 0xdf, 0xcc, 0xa2, 0x9a, 0x43, 0x1e, 0x83,
	0xb7, 0xc6, 0x22, 0x69, 0x79, 0xac, 0x4e, 0xbc, 0xb5, 0x06, 0x11, 0xd2, 0x89, 0xa8, 0xe7, 0x5a,
	0x4d, 0x08, 0x1a, 0xd4, 0x03, 0x61, 0xf9, 0xb4, 0x05, 0xdc, 0x92, 0x8c, 0x79, 0xc2, 0xaa, 0x33,
	0x17, 0x9a, 0x10, 0x58, 0xe1, 0x51, 0xd3, 0x72, 0x18, 0x93, 0x42, 0x72, 0x12, 0xc6, 0x80, 0x04,
	0x21, 0x5d, 0x22, 0x89, 0x45, 0x42, 0x52, 0x93, 0x7e, 0xe8, 0x99, 0x21, 0x67, 0x92, 0xe1, 0x15,
	0x2a, 0x24, 0x65, 0xa6, 0xd2, 0x30, 0x89, 0x4b, 0x42, 0x09, 0xdc, 0x14, 0xc4, 0x0f, 0x3d, 0x30,
	0xfd, 0x36, 0x09, 0x49, 0xb1, 0x94, 0xe8, 0x1f, 0x97, 0x2d, 0x09, 0x7e, 0xe8, 0x11, 0x09, 0x16,
	0xb4, 0x24, 0x04, 0x82, 0xb2, 0x40, 0x24, 0x2a, 0xa5, 0x4e, 0x16, 0x15, 0x76, 0x03, 0x21, 0x49,
	0x50, 0x87, 0x7d, 0xc2, 0x89, 0x8f, 0xaf, 0xa3, 0x45, 0x1a, 0xc8, 0x9b, 0x37, 0xf6, 0x39, 0xf5,
	0xa9, 0xa4, 0xc7, 0xa0, 0x6b, 0x2b, 0xda, 0xea, 0xbc, 0x3d, 0x86, 0xe2, 0x6b, 0xa8, 0xe0, 0x30,
	0xe6, 0x0d, 0x68, 0x69, 0x45, 0x1b, 0x05, 0xf1, 0x2a, 0xfa, 0xcb, 0x65, 0x91, 0xe3, 0xc1, 0x80,
	0x97, 0x51, 0xbc, 0x71, 0x38, 0x66, 0x0a, 0xc9, 0x69, 0xd0, 0x1c, 0x30, 0x67, 0x12, 0xe6, 0x18,
	0x8c, 0x9f, 0x6b, 0xc8, 0x70, 0xa9, 0xdf, 0x33, 0xb2, 0x43, 0x5b, 0xe0, 0xee, 0xc6, 0xb9, 0x3d,
	0x20, 0x5e, 0x04, 0x5b, 0xf7, 0xdb, 0x21, 0xe8, 0xb3, 0x2b, 0x99, 0xd5, 0x7c, 0xe5, 0xc0, 0x9c,
	0x54, 0x23, 0x73, 0xc4, 0xbb, 0xb9, 0xf5, 0x53, 0xd5, 0xed, 0x40, 0xf2, 0xb6, 0x3d, 0x21, 0x34,
	0xfe, 0x1f, 0xcd, 0x4b, 0xea, 0xc3, 0x81, 0x24, 0x7e, 0xa8, 0xcf, 0x29, 0x07, 0x03, 0x00, 0x17,
	0x51, 0xce, 0x8d, 0x38, 0x91, 0x94, 0x05, 0x7a, 0x56, 0xbd, 0xfc, 0xb1, 0xc6, 0x0f, 0x51, 0x8e,
	0x83, 0xa8, 0xd6, 0x7c, 0x12, 0xea, 0x39, 0x65, 0xe0, 0xf6, 0xb4, 0x06, 0x6c, 0x10, 0xd5, 0xbb,
	0x24, 0x4c, 0x32, 0xcd, 0xf2, 0x64, 0x85, 0xff, 0x45, 0x59, 0x1a, 0xd6, 0x88, 0xeb, 0x72, 0x3d,
	0xaf, 0x62, 0xce, 0xd1, 0x70, 0xc3, 0x75, 0x39, 0xfe, 0x0f, 0xe5, 0xdc, 0x40, 0xd4, 0x02, 0xe2,
	0x83, 0xbe, 0xa0, 0xde, 0x64, 0xdd, 0x40, 0xec, 0x11, 0x1f, 0xf0, 0x15, 0x84, 0xc0, 0x27, 0xd4,
	0x4b, 0xb6, 0x15, 0x12, 0x1f, 0x0a, 0x51, 0x3b, 0x97, 0x50, 0x26, 0xe2, 0x54, 0x5f, 0x54, 0x78,
	0xfc, 0x88, 0x5b, 0x08, 0x13, 0x29, 0x39, 0x75, 0x22, 0x09, 0x35, 0x87, 0x06, 0x2e, 0x0d, 0x9a,
	0x42, 0x7f, 0xf5, 0xf6, 0x75, 0x49, 0x59, 0xd9, 0x99, 0xd6, 0xca, 0x46, 0x5f, 0x6c, 0xb3, 0xa7,
	0x95, 0x98, 0xfa, 0x9b, 0x8c, 0xe3, 0xc5, 0x7b, 0xe8, 0xea, 0x39, 0x0e, 0x2e, 0x4e, 0xf9, 0x08,
	0xda, 0xbd, 0x6e, 0x8e, 0x1f, 0xf1, 0x3f, 0x68, 0xf6, 0x38, 0x26, 0xf5, 0x5a, 0x37, 0x59, 0xdc,
	0x4a, 0xaf, 0x6b, 0x45, 0x89, 0x16, 0x86, 0x4b, 0x79, 0xc6, 0xde, 0xbd, 0xe1, 0xbd, 0xf9, 0xca,
	0xfa, 0x64, 0x7b, 0x36, 0x08, 0x16, 0xf1, 0x3a, 0x54, 0x47, 0x7c, 0x0e, 0x47, 0xdd, 0x42, 0xcb,
	0x67, 0xbb, 0x9e, 0x26, 0xf7, 0xd2, 0x07, 0x0d, 0x2d, 0xf7, 0x63, 0x95, 0x47, 0x67, 0x7b, 0x09,
	0x65, 0x84, 0xe4, 0x7d, 0x19, 0x21, 0x39, 0xb6, 0x51, 0xdc, 0x25, 0x36, 0x34, 0x2a, 0xd3, 0x1b,
	0xa9, 0x8c, 0x1a, 0xe9, 0x0b, 0xe1, 0x43, 0x54, 0x10, 0xe0, 0x35, 0x6a, 0x1c, 0xe2, 0x9f, 0x28,
	0xab, 0x89, 0x9f, 0x4a, 0x79, 0x34, 0x6d, 0x3b, 0x1f, 0xcb, 0xd9, 0xd0, 0xb0, 0x41, 0x94, 0x4b,
	0x9d, 0xf4, 0xc0, 0x5e, 0x65, 0x92, 0xbd, 0x3b, 0x68, 0x26, 0x1e, 0x82, 0x5f, 0x3e, 0x24, 0xa5,
	0x82, 0x1f, 0x0d, 0x0d, 0x68, 0x46, 0x75, 0xf5, 0xf6, 0x45, 0xab, 0x75, 0xf6, 0xa4, 0x5e, 0x4e,
	0xdf, 0x95, 0xbe, 0x66, 0x06, 0x25, 0xad, 0xfe, 0x69, 0xb7, 0xc1, 0x8b, 0xf3, 0xde, 0x06, 0x87,
	0x17, 0x2d, 0xd5, 0xe5, 0x5e, 0x0b, 0xbf, 0xe1, 0xef, 0x6d, 0xb3, 0xd2, 0x39, 0x31, 0x52, 0xef,
	0x4f, 0x8c, 0xd4, 0xe9, 0x89, 0xa1, 0x3d, 0xe9, 0x1a, 0xda, 0xcb, 0xae, 0xa1, 0xbd, 0xe9, 0x1a,
	0x5a, 0xa7, 0x6b, 0x68, 0x1f, 0xbb, 0x86, 0xf6, 0xa5, 0x6b, 0xa4, 0x4e, 0xbb, 0x86, 0xf6, 0xf4,
	0x93, 0x91, 0xfa, 0xf6, 0xee, 0xf3, 0xb3, 0x74, 0xc6, 0x99, 0x53, 0x1f, 0x0c, 0xd5, 0xef, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x43, 0xbd, 0x5e, 0xd1, 0xd9, 0x08, 0x00, 0x00,
}
