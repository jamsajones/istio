// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/pkg/aspect/config/quotas.proto

package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// Configures a quotas aspect.
type QuotasParams struct {
	// The set of quotas that will be populated and handed to aspects at run time.
	Quotas []*QuotasParams_Quota `protobuf:"bytes,1,rep,name=quotas" json:"quotas,omitempty"`
}

func (m *QuotasParams) Reset()                    { *m = QuotasParams{} }
func (*QuotasParams) ProtoMessage()               {}
func (*QuotasParams) Descriptor() ([]byte, []int) { return fileDescriptorQuotas, []int{0} }

type QuotasParams_Quota struct {
	// Must match the name of some quota_descriptor in the global config.
	DescriptorName string `protobuf:"bytes,1,opt,name=descriptor_name,json=descriptorName,proto3" json:"descriptor_name,omitempty"`
	// Map of quota_descriptor label name to attribute expression. At run time each
	// expression will be evaluated to determine the value provided to the aspect. The
	// result of evaluating the expression must match the ValueType of the label in the quota_descriptor.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The upper limit for this quota.
	MaxAmount int64 `protobuf:"varint,3,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount,omitempty"`
	// The amount of time allocated quota remains valid before it is
	// automatically released. This is only meaningful for quotas
	// annotated as rate limits, otherwise the value must be zero.
	Expiration time.Duration `protobuf:"bytes,4,opt,name=expiration,stdduration" json:"expiration"`
}

func (m *QuotasParams_Quota) Reset()                    { *m = QuotasParams_Quota{} }
func (*QuotasParams_Quota) ProtoMessage()               {}
func (*QuotasParams_Quota) Descriptor() ([]byte, []int) { return fileDescriptorQuotas, []int{0, 0} }

func init() {
	proto.RegisterType((*QuotasParams)(nil), "pkg.aspect.config.QuotasParams")
	proto.RegisterType((*QuotasParams_Quota)(nil), "pkg.aspect.config.QuotasParams.Quota")
}
func (m *QuotasParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotasParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Quotas) > 0 {
		for _, msg := range m.Quotas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuotas(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QuotasParams_Quota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuotasParams_Quota) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DescriptorName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuotas(dAtA, i, uint64(len(m.DescriptorName)))
		i += copy(dAtA[i:], m.DescriptorName)
	}
	if len(m.Labels) > 0 {
		for k, _ := range m.Labels {
			dAtA[i] = 0x12
			i++
			v := m.Labels[k]
			mapSize := 1 + len(k) + sovQuotas(uint64(len(k))) + 1 + len(v) + sovQuotas(uint64(len(v)))
			i = encodeVarintQuotas(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintQuotas(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintQuotas(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.MaxAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuotas(dAtA, i, uint64(m.MaxAmount))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintQuotas(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdDuration(m.Expiration)))
	n1, err := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Expiration, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func encodeVarintQuotas(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QuotasParams) Size() (n int) {
	var l int
	_ = l
	if len(m.Quotas) > 0 {
		for _, e := range m.Quotas {
			l = e.Size()
			n += 1 + l + sovQuotas(uint64(l))
		}
	}
	return n
}

func (m *QuotasParams_Quota) Size() (n int) {
	var l int
	_ = l
	l = len(m.DescriptorName)
	if l > 0 {
		n += 1 + l + sovQuotas(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuotas(uint64(len(k))) + 1 + len(v) + sovQuotas(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuotas(uint64(mapEntrySize))
		}
	}
	if m.MaxAmount != 0 {
		n += 1 + sovQuotas(uint64(m.MaxAmount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Expiration)
	n += 1 + l + sovQuotas(uint64(l))
	return n
}

func sovQuotas(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuotas(x uint64) (n int) {
	return sovQuotas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QuotasParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuotasParams{`,
		`Quotas:` + strings.Replace(fmt.Sprintf("%v", this.Quotas), "QuotasParams_Quota", "QuotasParams_Quota", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuotasParams_Quota) String() string {
	if this == nil {
		return "nil"
	}
	keysForLabels := make([]string, 0, len(this.Labels))
	for k, _ := range this.Labels {
		keysForLabels = append(keysForLabels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLabels)
	mapStringForLabels := "map[string]string{"
	for _, k := range keysForLabels {
		mapStringForLabels += fmt.Sprintf("%v: %v,", k, this.Labels[k])
	}
	mapStringForLabels += "}"
	s := strings.Join([]string{`&QuotasParams_Quota{`,
		`DescriptorName:` + fmt.Sprintf("%v", this.DescriptorName) + `,`,
		`Labels:` + mapStringForLabels + `,`,
		`MaxAmount:` + fmt.Sprintf("%v", this.MaxAmount) + `,`,
		`Expiration:` + strings.Replace(strings.Replace(this.Expiration.String(), "Duration", "google_protobuf1.Duration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuotas(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QuotasParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuotasParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuotasParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quotas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuotas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quotas = append(m.Quotas, &QuotasParams_Quota{})
			if err := m.Quotas[len(m.Quotas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuotas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuotasParams_Quota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuotas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuotas
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuotas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuotas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuotas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuotas
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuotas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuotas
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuotas(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthQuotas
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			m.MaxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAmount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuotas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuotas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuotas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuotas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuotas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuotas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuotas
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuotas
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuotas(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuotas = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuotas   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/pkg/aspect/config/quotas.proto", fileDescriptorQuotas) }

var fileDescriptorQuotas = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xbd, 0x6e, 0xdb, 0x30,
	0x18, 0x24, 0xa5, 0x5a, 0xa8, 0xe9, 0xa2, 0x3f, 0x84, 0x07, 0x55, 0x40, 0x69, 0xa1, 0x68, 0x51,
	0x4d, 0x14, 0xea, 0x2e, 0x6e, 0x81, 0x0e, 0x75, 0xdb, 0x21, 0x40, 0x10, 0x24, 0x1a, 0xb3, 0x18,
	0xb4, 0x4d, 0x0b, 0x82, 0x25, 0x51, 0xd1, 0x4f, 0x20, 0x6f, 0x79, 0x84, 0x8c, 0x41, 0x9e, 0x20,
	0x8f, 0xe2, 0xd1, 0x63, 0xa6, 0x24, 0x52, 0x96, 0x20, 0x93, 0x1f, 0x21, 0x30, 0xa9, 0x20, 0x06,
	0xb2, 0x64, 0xfb, 0xee, 0x8e, 0xf7, 0x1d, 0xbf, 0x43, 0x5f, 0xa2, 0xa0, 0xe4, 0xa9, 0x9b, 0xcc,
	0x7d, 0x97, 0x65, 0x09, 0x9f, 0xe4, 0xee, 0x44, 0xc4, 0xb3, 0xc0, 0x77, 0x8f, 0x0a, 0x91, 0xb3,
	0x8c, 0x26, 0xa9, 0xc8, 0x05, 0xfe, 0x90, 0xcc, 0x7d, 0xaa, 0x74, 0xaa, 0x74, 0xab, 0xeb, 0x0b,
	0x5f, 0x48, 0xd5, 0xdd, 0x4c, 0xea, 0xa1, 0x45, 0x7c, 0x21, 0xfc, 0x90, 0xbb, 0x12, 0x8d, 0x8b,
	0x99, 0x3b, 0x2d, 0x52, 0x96, 0x07, 0x22, 0x56, 0xfa, 0xe7, 0x7b, 0x0d, 0xbd, 0x39, 0x90, 0x9b,
	0xf7, 0x59, 0xca, 0xa2, 0x0c, 0xff, 0x46, 0x86, 0x4a, 0x32, 0xa1, 0xad, 0x3b, 0x9d, 0xfe, 0x57,
	0xfa, 0x2c, 0x8a, 0x6e, 0x1b, 0x14, 0xf0, 0x1a, 0x93, 0x75, 0xae, 0xa1, 0x96, 0x64, 0xf0, 0x37,
	0xf4, 0x6e, 0xca, 0xb3, 0x49, 0x1a, 0x24, 0xb9, 0x48, 0x47, 0x31, 0x8b, 0xb8, 0x09, 0x6d, 0xe8,
	0xb4, 0xbd, 0xb7, 0x4f, 0xf4, 0x1e, 0x8b, 0x38, 0xde, 0x41, 0x46, 0xc8, 0xc6, 0x3c, 0xcc, 0x4c,
	0x4d, 0x26, 0x7e, 0x7f, 0x51, 0x22, 0xdd, 0x95, 0x9e, 0xff, 0x71, 0x9e, 0x2e, 0xbc, 0x66, 0x01,
	0xfe, 0x84, 0x50, 0xc4, 0xca, 0x11, 0x8b, 0x44, 0x11, 0xe7, 0xa6, 0x6e, 0x43, 0x47, 0xf7, 0xda,
	0x11, 0x2b, 0xff, 0x48, 0x02, 0xff, 0x45, 0x88, 0x97, 0x49, 0xa0, 0x0a, 0x30, 0x5f, 0xd9, 0xd0,
	0xe9, 0xf4, 0x3f, 0x52, 0xd5, 0x10, 0x7d, 0x6c, 0x88, 0xfe, 0x6b, 0x1a, 0x1a, 0xbe, 0x5e, 0x5e,
	0xf5, 0xc0, 0xd9, 0x75, 0x0f, 0x7a, 0x5b, 0x36, 0xeb, 0x27, 0xea, 0x6c, 0x45, 0xe3, 0xf7, 0x48,
	0x9f, 0xf3, 0x45, 0x73, 0xda, 0x66, 0xc4, 0x5d, 0xd4, 0x3a, 0x66, 0x61, 0xc1, 0x4d, 0x4d, 0x72,
	0x0a, 0xfc, 0xd2, 0x06, 0x70, 0x38, 0x58, 0x56, 0x04, 0xac, 0x2a, 0x02, 0x2e, 0x2b, 0x02, 0xd6,
	0x15, 0x01, 0x27, 0x35, 0x81, 0x17, 0x35, 0x01, 0xcb, 0x9a, 0xc0, 0x55, 0x4d, 0xe0, 0x4d, 0x4d,
	0xe0, 0x5d, 0x4d, 0xc0, 0xba, 0x26, 0xf0, 0xf4, 0x96, 0x80, 0x43, 0x43, 0xdd, 0x3f, 0x36, 0xe4,
	0xef, 0x7e, 0x3c, 0x04, 0x00, 0x00, 0xff, 0xff, 0xad, 0x3d, 0xaf, 0x3c, 0x1e, 0x02, 0x00, 0x00,
}
