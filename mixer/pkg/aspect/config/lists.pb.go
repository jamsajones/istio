// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/pkg/aspect/config/lists.proto

package config

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Configures a lists aspect.
//
// Example:
//    kind: lists
//    params:
// 	    blacklist: true
//      check_expression: source.ip
type ListsParams struct {
	// blacklist determines if this behaves like a blacklist
	// default is whitelist
	Blacklist bool `protobuf:"varint,1,opt,name=blacklist,proto3" json:"blacklist,omitempty"`
	// check_expression is the expression evaluated at runtime to derive the value that is checked against the list
	CheckExpression string `protobuf:"bytes,2,opt,name=check_expression,json=checkExpression,proto3" json:"check_expression,omitempty"`
}

func (m *ListsParams) Reset()                    { *m = ListsParams{} }
func (*ListsParams) ProtoMessage()               {}
func (*ListsParams) Descriptor() ([]byte, []int) { return fileDescriptorLists, []int{0} }

func init() {
	proto.RegisterType((*ListsParams)(nil), "pkg.aspect.config.ListsParams")
}
func (m *ListsParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListsParams) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Blacklist {
		dAtA[i] = 0x8
		i++
		if m.Blacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.CheckExpression) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLists(dAtA, i, uint64(len(m.CheckExpression)))
		i += copy(dAtA[i:], m.CheckExpression)
	}
	return i, nil
}

func encodeVarintLists(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListsParams) Size() (n int) {
	var l int
	_ = l
	if m.Blacklist {
		n += 2
	}
	l = len(m.CheckExpression)
	if l > 0 {
		n += 1 + l + sovLists(uint64(l))
	}
	return n
}

func sovLists(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLists(x uint64) (n int) {
	return sovLists(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListsParams) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListsParams{`,
		`Blacklist:` + fmt.Sprintf("%v", this.Blacklist) + `,`,
		`CheckExpression:` + fmt.Sprintf("%v", this.CheckExpression) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLists(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListsParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLists
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListsParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListsParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLists
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Blacklist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckExpression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLists
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLists
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckExpression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLists(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLists
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLists(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLists
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLists
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLists
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLists
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLists
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLists(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLists = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLists   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mixer/pkg/aspect/config/lists.proto", fileDescriptorLists) }

var fileDescriptorLists = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0xcd, 0xac, 0x48,
	0x2d, 0xd2, 0x2f, 0xc8, 0x4e, 0xd7, 0x4f, 0x2c, 0x2e, 0x48, 0x4d, 0x2e, 0xd1, 0x4f, 0xce, 0xcf,
	0x4b, 0xcb, 0x4c, 0xd7, 0xcf, 0xc9, 0x2c, 0x2e, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x12, 0x2c, 0xc8, 0x4e, 0xd7, 0x83, 0x48, 0xeb, 0x41, 0xa4, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3,
	0xc1, 0xb2, 0xfa, 0x20, 0x16, 0x44, 0xa1, 0x52, 0x18, 0x17, 0xb7, 0x0f, 0x48, 0x5f, 0x40, 0x62,
	0x51, 0x62, 0x6e, 0xb1, 0x90, 0x0c, 0x17, 0x67, 0x52, 0x4e, 0x62, 0x72, 0x36, 0xc8, 0x2c, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0x84, 0x80, 0x90, 0x26, 0x97, 0x40, 0x72, 0x46, 0x6a, 0x72,
	0x76, 0x7c, 0x6a, 0x45, 0x41, 0x51, 0x6a, 0x71, 0x71, 0x66, 0x7e, 0x9e, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x3f, 0x58, 0xdc, 0x15, 0x2e, 0xec, 0x64, 0x71, 0xe2, 0xa1, 0x1c, 0xc3, 0x85,
	0x87, 0x72, 0x0c, 0x37, 0x1e, 0xca, 0x31, 0x7c, 0x78, 0x28, 0xc7, 0xd0, 0xf0, 0x48, 0x8e, 0x71,
	0xc5, 0x23, 0x39, 0x86, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e,
	0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0x88, 0x62, 0x83,
	0xb8, 0x33, 0x89, 0x0d, 0xec, 0x30, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xe1, 0x87,
	0xac, 0xe8, 0x00, 0x00, 0x00,
}
